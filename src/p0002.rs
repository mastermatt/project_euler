// Even Fibonacci numbers
//
// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

// struct Fibonacci {
//     x: (u32, u32),
// }
//
// impl Fibonacci {
//     fn new() -> Fibonacci {
//         Fibonacci { x: (1, 2) }
//     }
// }
//
// impl Iterator for Fibonacci {
//     type Item = u32;
//     fn next(&mut self) -> Option<Self::Item> {
//         self.x = (self.x.1, self.x.0 + self.x.1);
//         Some(self.x.0)
//     }
// }
//
// fn compute2(bound: u32) -> u32 {
//     Fibonacci::new()
//         .take_while(|&n| n < bound)
//         .filter(|&n| n % 2 == 0)
//         .sum()
// }

fn compute(bound: u32) -> u32 {
    let mut result = 0;
    let mut x = (1, 2);

    while x.1 < bound {
        if x.1 % 2 == 0 {
            result += x.1;
        }

        x = (x.1, x.0 + x.1);
    }

    result
}

#[test]
fn example() {
    assert_eq!(44, compute(100));
}

#[test]
fn problem() {
    assert_eq!(4613732, compute(4_000_000));
}
