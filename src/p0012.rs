// Highly divisible triangular number
//
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

fn compute(bound: u32) -> u64 {
    let mut num = 1;
    let mut i = 1;

    while count_divisors(num) <= bound {
        i += 1;
        num += i;
    }

    num
}

// https://codereview.stackexchange.com/a/120646
// https://en.wikipedia.org/wiki/Divisor_function
// this is stupid fast
fn count_divisors(num: u64) -> u32 {
    let mut num_divisors = 1;
    let mut factor = 2; // Candidate for prime factor of `n`
    let mut n = num;

    // If `n` is not a prime number then it must have one factor
    // which is <= `sqrt(n)`, so we try these first:
    while factor * factor <= n {
        if n % factor == 0 {
            // `factor` is a prime factor of `n`, determine the exponent:
            let mut exponent = 0;
            loop {
                n /= factor;
                exponent += 1;
                if n % factor != 0 {
                    break;
                }
            }
            // `factor^exponent` is one term in the prime factorization of n,
            // this contributes as factor `exponent + 1`:
            num_divisors *= exponent + 1;
        }
        // Next possible prime factor:
        factor = if factor == 2 { 3 } else { factor + 2 }
    }

    // Now `n` is either 1 or a prime number. In the latter case,
    // it contributes a factor 2:
    if n > 1 {
        num_divisors *= 2;
    }

    num_divisors
}

#[test]
fn example() {
    assert_eq!(28, compute(5));
}

#[test]
fn test_fifty() {
    assert_eq!(25200, compute(50));
}

// this only takes 12-20ms!
#[test]
fn problem() {
    assert_eq!(76576500, compute(500));
}
